# Format: <SettingName>: <Settingvalue>
# Setting name must appear at start of line and there must be whitespace after the colon.
# Multiple values can be comma separated or on subsequent lines.
#
# Valid settings for colour rules:
# REGEX()   A regular expression. Colours entire match or first group.
# WORD()	Matches a word (case sensitive)
# WORDI()   Matches a word (case insensitive)
# TEXT()	Match any text in the line (case sensitive)
# TEXTI()	Match any text in the line (case insensitive)

#----------------------------------------------
# settings

Extensions:					*.c3

BlockCommentStart:			/*

BlockCommentEnd:			*/

#----------------------------------------------
# colour rules

Language.Comment:
REGEX(//.*)

Language.String:
REGEX(L?"[^"\\]*(?:\\.[^"\\]*)*")
REGEX(L?'[^'\\]*(?:\\.[^'\\]*)*')

Language.Preprocessor:
REGEX(\s*#\s*[a-zA-Z_]+\w*)
REGEX(\$)

Language.Keyword:
WORD(asm)
WORD(assert)
WORD(bitstruct)
WORD(break)
WORD(case)
WORD(catch)
WORD(const)
WORD(continue)
WORD(def)
WORD(default)
WORD(defer)
WORD(distinct)
WORD(do)
WORD(else)
WORD(enum)
WORD(extern)
WORD(false)
WORD(fault)
WORD(for)
WORD(foreach)
WORD(foreach_r)
WORD(fn)
WORD(tlocal)
WORD(if)
WORD(inline)
WORD(import)
WORD(macro)
WORD(module)
WORD(nextcase)
WORD(null)
WORD(return)
WORD(static)
WORD(struct)
WORD(switch)
WORD(true)
WORD(try)
WORD(union)
WORD(var)
WORD(while)
WORD(%switch)
WORD($default)
WORD($case)
WORD($if)
WORD($typeof)
WORD($else)
WORD($sizeof)
WORD($for)
WORD($case)

Language.Enum:
REGEX(enum\s+([A-Z_]+[a-zA-Z0-9_]*))

Language.Class:
WORD(bool)
WORD(char)
WORD(ichar)
WORD(short)
WORD(ushort)
WORD(int)
WORD(uint)
WORD(long)
WORD(ulong)
WORD(int128)
WORD(uint128)
WORD(isz)
WORD(usz)
WORD(iptr)
WORD(uptr)
WORD(float16)
WORD(float)
WORD(double)
WORD(float128)
REGEX(([A-Z_]+[a-zA-Z0-9_]*))

Language.Variable:
REGEX(([a-z_]+[a-zA-Z0-9_]*))

Language.Number:
REGEX((0[xX][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*[uUlLzZfFdD]*)
REGEX([0-9]+\.[0-9]*[fd]*[fFdD]*)
REGEX([0-9]*\.[0-9]+[fd]*[fFdD]*)

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.SemiColon:
TEXT(;)

Language.Comma:
TEXT(,)

Language.Operator:
TEXT(.)
TEXT(:)
TEXT(-)
TEXT(>)
TEXT(=)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(<)
TEXT(>)
TEXT(.)
TEXT(!)
TEXT(|)
TEXT(&)
TEXT(:)
TEXT(~)
TEXT(?)
TEXT(^)
